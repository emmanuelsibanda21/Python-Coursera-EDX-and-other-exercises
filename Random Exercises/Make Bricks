'''We want to make a row of bricks that is goal inches long. We have a number of small bricks (1 inch each) and big bricks (5 inches each). Return True if it is possible to make the goal by choosing from the given bricks. This is a little harder than it looks and can be done without any loops'''
#decided to add a few more things to make the algorithm more useful
#algorithm checks how many big/small bricks you currently have and tells you how many small/big bricks you have to add/remove to meet the goal
#will have to factor in scenarios where you cannot meet the goal

import random
def make_bricks(small, big, goal):
  print('The goal is {0}'.format(goal))
  small = int(1*small)
  big = int(big*5)
  goal = int(goal)
  remainder = (small + big) - goal
  value_big = int(remainder//big)
  big_number = big//5
  try:
    if small + big != goal: 
      if goal > (big+small): print('False, You need to add {0} big bricks and {1} small bricks to meet the goal'.format(value_big, remainder%big))
      elif goal < (big+small):
        if (value_big*5) > big:
          print ('False, Since you only have a total of {0} big bricks, you will have to remove {1} big bricks and {2} small bricks instead'.format(big//5, big//5, (big+small)-(goal+big)//1))
        elif remainder > small: print ('False, since you only have a total of {0} small bricks, you will have to remove {1} small bricks and {2} big bricks instead'.format(small, small, ((big+small-goal+small)//big_number)))
        else: print('False, you need to remove {0} big bricks and {1} small bricks to meet the goal'.format(remainder//big, remainder%big))
    else: print('True, your bricks meet the goal')
    print('\n')
  except: 
    raise ValueError('Incorrect input')

#testcases  
make_bricks(9, 2, 15) 
make_bricks(10, 2, 20)
make_bricks(20, 1, 10)
make_bricks(1, 5, 1) 
make_bricks(8, 10, 52)
make_bricks(random.randint(0,100), random.randint(0,100), random.randint(0,200))
